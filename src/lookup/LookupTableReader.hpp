/*

Copyright (c) 2005-2014, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef LOOKUPTABLEREADER_HPP_
#define LOOKUPTABLEREADER_HPP_

#include "AbstractDataStructure.hpp"
#include "QuantityOfInterest.hpp"
#include "FileFinder.hpp"

/**
 * Class that will read lookup table entries, generated by LookupTableGenerator.
 *
 * Templated over parameter space dimension DIM.
 */
template<unsigned DIM>
class LookupTableReader : public AbstractDataStructure
{
private:
    /** The number of dimensions (parameters) in the table we are reading. */
    unsigned mNumParameters;

    /** The number of quantities of interest in the table we are reading. */
    unsigned mNumQoIs;

    /** The points in NUM_PARAMS-dimensional parameter space at which we have evaluated quantities of interest (lookup table co-ords) */
    std::vector<c_vector<double, DIM> > mParameterPoints;

    /** Did an error occur in the post-processing of this trace? */
    std::vector<bool> mDidErrorOccur;

    /** The Oxford metadata names of the parameters that we are going to scale */
    std::vector<std::string> mParameterNames;

    /** The QoIs that were evaluated at the points in #mParameterPoints */
    std::vector<std::vector<double> > mQuantitiesOfInterest;

    /** Error estimates */
    std::vector<std::vector<double> > mErrorEstimates;

    /** The list of quantities of interest that we should record */
    std::vector<QuantityOfInterest> mQuantitiesToRecord;

    /**
     * Method to load a standard line of the data file
     *
     * @param rLine The line to read tokens from.
     */
    virtual void LoadALine(std::stringstream& rLine);

    /**
     * Overridden method to read a header line,
     * this lets us know what to expect in the rest of
     * the file.
     */
    virtual bool LoadHeaderLine(std::stringstream& rLine);

public:
    /**
     * Constructor - also reads the file and populates member variables.
     *
     * @param rFileName  The base file name of the lookup table to read.
     * @param rOutputFolder  The folder it is in (defaults to "LookupTables"".
     */
    LookupTableReader(const std::string& rFileName,const std::string& rOutputFolder = "LookupTables");

    /**
     * @return The points in parameter space at which the quantities of interest were evaluated.
     */
    std::vector<c_vector<double, DIM> > GetParameterPoints();

    /**
     * @return The values of the quantities of interest that were evaluated at GetParameterPoints().
     */
    std::vector<std::vector<double> > GetFunctionValues();

    /**
     * @return The values of the quantities of interest error estimates that were evaluated at GetParameterPoints().
     */
    std::vector<std::vector<double> > GetErrorEstimates();

    /**
     * Get a certain quantity that has been evaluated at the parameter points.
     * This returns a subset of what would be returned by GetFunctionValues().
     *
     * @param quantity  The quantity of interest that you would like.
     * @return  A vector with an entry for each parameter point.
     */
    std::vector<double> GetQuantity(QuantityOfInterest quantity);

    /**
     * @return The Quantities of interest that are recorded in the file we have read.
     */
    std::vector<QuantityOfInterest> GetListOfQuantitiesOfInterest();

    /**
     * @return Whether there was a post-processing error evaluating the quantities of interest.
     */
    std::vector<bool> GetErrors();
};

#endif // LOOKUPTABLEREADER_HPP_
